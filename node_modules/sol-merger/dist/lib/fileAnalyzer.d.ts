import { RegistredImport } from './merger';
export declare class FileAnalyzer {
    filename: string;
    /**
     * Builds the function body depending on the export
     */
    static buildExportBody(analyzedFile: FileAnalyzerResult, e: FileAnalyzerExportsResult, newName: string, globalRenames: RegistredImport[]): string;
    /**
     * Filename to read to get contract data
     */
    constructor(filename: string);
    /**
     * Returns imports and exports of the processing file
     */
    analyze(): Promise<FileAnalyzerResult>;
    /**
     * Analyzes all the imports of the file
     */
    analyzeImports(contents: string): FileAnalyzerImportsResult[];
    /**
     * Single import statement to process. Basicly it analizes next things:
     *
     * 1. Rename of the global import if any
     * 2. Named imports if any
     * 3. Extract filename from import
     *
     */
    analyzeImport(importStatement: string): FileAnalyzerImportsResult;
    /**
     * Analyzes all the exports of the file (Contract, Interface, Library)
     *
     * Single export statement to process. Basicly it analizes next things:
     *
     * 1. Get the type of the export
     * 2. Get the body of the export
     * 3. Get inheritance of the specifier
     *
     */
    analyzeExports(contents: string): FileAnalyzerExportsResult[];
    /**
     * @param contents file contents
     * @param start start of the body, start must be pointing to "{"
     * @returns body of the export
     */
    findBodyEnd(contents: string, start: number): string;
}
export interface FileAnalyzerResult {
    filename: string;
    contents: string;
    imports: FileAnalyzerImportsResult[];
    exports: FileAnalyzerExportsResult[];
}
export interface FileAnalyzerImportsResult {
    file: string;
    globalRenameImport: string | null;
    namedImports: FileAnalyzerNamedImportResult[] | null;
}
export interface FileAnalyzerNamedImportResult {
    name: string;
    as: string;
}
export interface FileAnalyzerExportsResult {
    type: 'contract' | 'library' | 'interface';
    name: string;
    is: string;
    body: string;
}
