import { FileAnalyzerImportsResult, FileAnalyzerResult, FileAnalyzerNamedImportResult, FileAnalyzerExportsResult } from './fileAnalyzer';
export declare class Merger {
    delimeter: string;
    registeredImports: RegistredImport[];
    nodeModulesRoot: string;
    constructor(options?: SolMergerOptions);
    getPragmaRegex(): RegExp;
    getImportRegex(): RegExp;
    getPragma(contents: string): string;
    stripPragma(contents: string): string;
    isImported(filename: string, name: string, as: string | null): boolean;
    processFile(file: string, isRoot: boolean, parentImport?: FileAnalyzerImportsResult): Promise<string>;
    processImports(analyzedFile: FileAnalyzerResult): Promise<string[]>;
    processExports(analyzedFile: FileAnalyzerResult, parentImport?: FileAnalyzerImportsResult): Promise<string[]>;
    processExport(analyzedFile: FileAnalyzerResult, parentImport: FileAnalyzerImportsResult | undefined, e: FileAnalyzerExportsResult, shouldBeImported: (e: string) => boolean | FileAnalyzerNamedImportResult, isRenameGlobalImport: boolean, result: string[]): void;
    registerImport(i: RegistredImport): void;
    getGlobalImports(): RegistredImport[];
    stripImports(contents: string): string;
    getNodeModulesPath(file: string): Promise<string>;
}
export interface SolMergerOptions {
    delimeter?: string;
}
export interface RegistredImport {
    file: string;
    name: string;
    as: string;
    globalRename: string;
}
