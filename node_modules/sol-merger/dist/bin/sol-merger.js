#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const glob_1 = tslib_1.__importDefault(require("glob"));
const cli_color_1 = tslib_1.__importDefault(require("cli-color"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const merger_1 = require("../lib/merger");
const done_1 = require("../utils/done");
const commander_1 = tslib_1.__importDefault(require("commander"));
const debug = debug_1.default('sol-merger:debug');
let inputGlob, outputDir, append;
commander_1.default
    .option('-a, --append [append]', '', /^([a-zA-Z_]+)$/)
    .arguments('<glob> [outputDir]')
    .action((_glob, _outputDir) => {
    inputGlob = _glob;
    outputDir = _outputDir;
})
    .parse(process.argv);
if (!inputGlob) {
    console.log(cli_color_1.default.red('Please specify input solidity contract.'));
    commander_1.default.outputHelp();
    done_1.done();
}
append = commander_1.default.append || '_merged';
if (outputDir) {
    outputDir = path_1.default.isAbsolute(outputDir)
        ? outputDir
        : path_1.default.join(process.cwd(), outputDir);
}
debug(outputDir);
glob_1.default(inputGlob, {
    cwd: process.cwd(),
    absolute: true,
}, execute);
function execute(err, files) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (err) {
            return done_1.done(err);
        }
        debug(files);
        if (files.length === 0) {
            // eslint-disable-next-line
            console.log(cli_color_1.default.yellow('No files found for merge'));
        }
        const promises = files.map((file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const merger = new merger_1.Merger({ delimeter: '\n\n' });
            let result;
            result = yield merger.processFile(file, true);
            let outputFile;
            if (outputDir) {
                outputFile = path_1.default.join(outputDir, path_1.default.basename(file));
            }
            else {
                const extname = path_1.default.extname(file);
                outputFile = path_1.default.join(path_1.default.dirname(file), path_1.default.basename(file, extname) + append + extname);
            }
            debug(`${file} -> ${outputFile}`);
            yield fs_extra_1.default.outputFile(outputFile, result, { encoding: 'utf-8' });
        }));
        Promise.all(promises)
            .then(done_1.done)
            .catch(done_1.done);
    });
}
//# sourceMappingURL=sol-merger.js.map